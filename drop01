<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline Users Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body { padding: 20px; }
        .table-danger { background-color: #f8d7da !important; } /* Light red for complaints */
    </style>
</head>
<body>
    <div class="container">
        <h2 class="mb-4">Offline Users</h2>
        <table id="dataTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>SN</th>
                    <th>Window Name</th>
                    <th onclick="sortTable('pon')" style="cursor: pointer;">PON Number</th>
                    <th>User ID</th>
                    <th>Mobile Number</th>
                    <th>Location</th>
                    <th onclick="sortTable('timestamp')" style="cursor: pointer;">Time Stamp</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Modal Popup -->
    <div class="modal fade" id="windowModal" tabindex="-1" aria-labelledby="windowModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="windowModalLabel">Select Window</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <select id="windowSelect" class="form-select">
                        <option value="">-- Select Window --</option>
                        <option value="Amanwiz">Amanwiz</option>
                        <option value="Medanta">Medanta</option>
                        <option value="Sevai">Sevai</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="proceedBtn">Proceed</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        let currentData = [];
        let sortConfig = { key: 'timestamp', direction: 'desc' };

        document.addEventListener('DOMContentLoaded', () => {
            const modal = new bootstrap.Modal(document.getElementById('windowModal'));
            modal.show();

            document.getElementById('proceedBtn').addEventListener('click', () => {
                const selectedWindow = document.getElementById('windowSelect').value;
                if (selectedWindow) {
                    modal.hide();
                    fetchData(selectedWindow);
                } else {
                    alert('Please select a window.');
                }
            });
        });

        async function fetchData(selectedWindow) {
            const sheetId = '12hMlwNb1TfQuC_rh9Wuz1iaLdMk_ftwtDRRYcTuAoEg';
            const sheetName = 'TheMaster'; // Adjusted to 'TheMaster' based on likely casing; change if different
            const url = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&sheet=${sheetName}`;

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Failed to fetch data. Ensure the sheet is shared publicly.');
                }
                const csvText = await response.text();
                const rows = parseCSV(csvText);

                // Skip header row
                const data = rows.slice(1).map(row => ({
                    window: row[0] || '',      // Column A (index 0)
                    pon: row[33] || '',        // Column AH (index 33)
                    userId: row[13] || '',     // Column N (index 13)
                    mobile: row[15] || '',     // Column P (index 15)
                    location: row[16] || '',   // Column Q (index 16)
                    timestamp: row[27] || '',  // Column AB (index 27)
                    ticket: row[23] || ''      // Column X (index 23)
                }));

                // Filter for offline users (timestamp not empty) and matching window
                const filtered = data.filter(d => d.window === selectedWindow && d.timestamp.trim() !== '');

                // Initial sort by timestamp desc
                sortConfig = { key: 'timestamp', direction: 'desc' };
                sortData(filtered);
                populateTable(filtered);
            } catch (error) {
                console.error(error);
                alert('Error fetching data: ' + error.message + '. Make sure the Google Sheet is shared with "Anyone with the link" as "Viewer".');
            }
        }

        function parseCSV(text) {
            const lines = text.split(/\r?\n/);
            return lines.map(line => {
                return line.split(',').map(field => field.trim().replace(/^["']|["']$/g, ''));
            });
        }

        function sortTable(key) {
            let direction = 'asc';
            if (sortConfig.key === key && sortConfig.direction === 'asc') {
                direction = 'desc';
            }
            sortConfig = { key, direction };
            sortData(currentData);
            populateTable(currentData);
        }

        function sortData(data) {
            data.sort((a, b) => {
                let valA = a[sortConfig.key];
                let valB = b[sortConfig.key];

                if (sortConfig.key === 'timestamp') {
                    valA = new Date(valA);
                    valB = new Date(valB);
                } else if (sortConfig.key === 'pon') {
                    valA = parseFloat(valA) || 0;
                    valB = parseFloat(valB) || 0;
                }

                if (valA < valB) return sortConfig.direction === 'asc' ? -1 : 1;
                if (valA > valB) return sortConfig.direction === 'asc' ? 1 : -1;
                return 0;
            });
        }

        function populateTable(data) {
            currentData = data;
            const tbody = document.querySelector('#dataTable tbody');
            tbody.innerHTML = '';
            data.forEach((row, index) => {
                const tr = document.createElement('tr');
                if (row.ticket.trim() !== '') {
                    tr.classList.add('table-danger');
                }
                tr.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${row.window}</td>
                    <td>${row.pon}</td>
                    <td>${row.userId}</td>
                    <td>${row.mobile}</td>
                    <td>${row.location}</td>
                    <td>${row.timestamp}</td>
                `;
                tbody.appendChild(tr);
            });
        }
    </script>
</body>
</html>
                                                                            
